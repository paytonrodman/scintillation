#!/usr/bin/python
#
# flag_modidx.py
#
# A program to flag outliers in structure function information generated by
# calculate_sf.py and remove them.
#
# Usage: python flag_modidx.py -i [input_file] -o [output_dir]
#
# Output:
#    - .json log files listing which sources had outliers removed, and the
#      location of the outliers
#    - cleaned structure function files with outliers removed
#

# Python standard modules
import argparse
import sys
import glob
from pathlib import Path

# Other Python modules
import scipy.signal
import json
import numpy as np
import statsmodels.robust

def main(**kwargs):
    for SF_file in glob.glob(kwargs['input_dir']+'.json'):
        fname = SF_file.split('/')[-1]
        logfile = kwargs['output_dir'] + str(Path(SF_file.stem)) + '_log.json'
        outfile = kwargs['output_dir'] + str(Path(SF_file.stem)) + '_cleaned.json'

        data = []
        log = []
        full = {}

        # Read SF data
        with open(SF_file) as f:
            for line in f:
                data.append(json.loads(line))

        for source_no in range(len(data)):
            sourcename = data[source_no][0].keys()
            sourcename = sourcename[0]
            print(f'Source number [{source_no+1}] out of [{len(data)}]')

            # Unpack data
            data_type = data[source_no][0][sourcename] # gives dictionary to 'tau', 'sf', or 'mod'
            mod = data_type['mod']
            tau = data_type['tau']
            sf = data_type['sf']
            mod_numel = data_type['mod_numel']
            num_epochs = data_type['num_epochs']
            pos = data_type['pos']
            mod_list = []

            for i in range(len(mod[0])):
                string = 'mod' + repr(i)
                mod_list.append(mod[0][string])

            # Replace NaN values in mod_list with its nearest left-hand neighbour
            lastgood = np.nanmean(mod_list)
            for i,value in enumerate(mod_list):
                if not np.isnan(value):
                    lastgood = value
                else:
                    mod_list[i] = lastgood

            # Apply median window filter and median absolute deviation
            filt = scipy.signal.medfilt(mod_list, 15)
            sigma = statsmodels.robust.mad(mod_list)
            flagged = (np.abs(mod_list - filt) / sigma) > 5

            # If there are any outliers flagged, remove from data and create record
            if True in flagged:
                flag_idx = [i for i,x in enumerate(flagged) if x == True]
                for j in flag_idx:
                    data[source_no][0][sourcename]['sf'][0][j]['sf'+repr(j)] = []
                    data[source_no][0][sourcename]['tau'][0][j]['tau'+repr(j)] = []
                    data[source_no][0][sourcename]['mod'][0]['mod'+repr(j)] = np.NaN
                    data[source_no][0][sourcename]['mod_numel'][0]['numel'+repr(j)] = 0
                full[sourcename] = flag_idx

        # Write log file with information about removed outliers
        with open(logfile, mode='w') as f:
            log.append(full)
            json.dump(logfile, f)

        # Save cleaned data
        with open(outfile, mode='w') as f:
            f.write(json.dumps(data))


# Execute main function
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Flag and remove outliers in the Structure Function.')
    parser.add_argument('-i', '--input_dir',
                        type=argparse.FileType('r'),
                        nargs=1,
                        default=None,
                        help='Directory of Structure Function files.')
    parser.add_argument('-o', '--output_dir',
                        type=str,
                        default=None,
                        help='Directory to save output.')
    args = parser.parse_args()

    main(**vars(args))
